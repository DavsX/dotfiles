#!/bin/bash
# --filter=":- .gitignore" \

if [ $# -eq 1 ] ; then
    FSCK=0
    DEVICE=$1
elif [ $# -eq 2 ] && [ "$1" == "-f" ] ; then
    FSCK=1
    DEVICE=$2
else
    echo "Usage: `basename $0` [-f] <device>"
    exit 1
fi

if [ ! -e /dev/$DEVICE ] ; then
    echo "/dev/$DEVICE does not exists, partprobing /dev/${DEVICE::-1}"
    partprobe /dev/${DEVICE::-1}
    if [ ! -e /dev/$DEVICE ] ; then
        echo "/dev/$DEVICE does not exist after partprobe"
        exit 1
    fi
fi

CRYPTSETUP=$(which cryptsetup)
if [ -z "$CRYPTSETUP" ] ; then
    echo "cryptsetup not found"
    exit
fi

BACKUP_KEYFILE=${BACKUP_KEYFILE:-/root/keyfile}

if [ -z "$BACKUP_KEYFILE" ] || [ ! -f "$BACKUP_KEYFILE" ] ; then
    echo "No backup keyfile found"
    exit
fi

$CRYPTSETUP luksOpen /dev/$DEVICE backup --key-file "$BACKUP_KEYFILE"
if [ ! -e /dev/mapper/backup ] ; then
    echo "/dev/mapper/backup does not exist"
    exit 1
fi
echo "/dev/mapper/backup created..."

if [ -d /backup ] ; then
    echo "WARNING! /backup existed!"
    rm -rf /backup
fi
mkdir /backup
echo "/backup created..."

if [ ! -d /backup ] ; then
    echo "/backup does not exist"
    exit 1
fi

mount /dev/mapper/backup /backup
if ! mount | grep /backup > /dev/null ; then
    echo "/backup not mounted"
    exit 1
fi
echo "/backup mounted..."
mount | grep "/backup"

if [ ! -d /backup/data ]; then
    echo "Creating /backup/data"
    mkdir /backup/data
fi

if [ ! -d /backup/data ]; then
    echo "/backup/data does not exist"
    exit 1
fi

if [ -e /backup/backup_system ] ; then
    echo "Backup type: system"
    read -n 1
    rsync --archive --acls --xattrs --verbose --compress --delete \
          --exclude-from="/home/davs/dotfiles/rsync_ignore"       \
          --exclude="/backup"                                     \
          --exclude="/mnt"                                        \
          / /backup/data
elif [ -e /backup/backup_all ] ; then
    echo "Backup type: all"
    read -n 1
    rsync --archive --acls --xattrs --verbose --compress --delete \
          --exclude-from="/home/davs/dotfiles/rsync_ignore"       \
          --exclude="/backup"                                     \
          --include="/opt/minecraft/***"                          \
          / /backup/data
elif [ -e /backup/backup_home ] ; then
    echo "Backup type: home"
    read -n 1
    rsync --archive --acls --xattrs --verbose --compress --delete \
          --exclude-from="/home/davs/dotfiles/rsync_ignore"       \
          --exclude="/backup"                                     \
          --include="/home/"                                      \
          --include="/home/davs/***"                              \
          --exclude="*"                                           \
          / /backup/data
elif [ -e /backup/backup_8g ] ; then
    echo "Backup type: 8G"
    read -n 1
    rsync --archive --acls --xattrs --verbose --compress --delete \
          --exclude-from="/home/davs/dotfiles/rsync_ignore"       \
          --exclude="/backup"                                     \
          --exclude="/mnt"                                        \
          / /backup/data
elif [ -e /backup/backup_32g ] ; then
    echo "Backup type: 32G"
    read -n 1
    rsync --archive --acls --xattrs --verbose --compress --delete \
          --exclude-from="/home/davs/dotfiles/rsync_ignore"       \
          --exclude="/backup"                                     \
          --exclude="/mnt/data/Music"                             \
          --exclude="/mnt/data/Software"                          \
          --exclude="/mnt/data/Videos"                            \
          --exclude="/mnt/data/Docs/School"                       \
          / /backup/data
else
    echo "No backup type detected"
fi
echo "rsync has finished..."
sync
echo "sync has finished..."

echo "======================="
echo "`df -h /backup`"
echo "======================="

umount /backup
if mount | grep /backup > /dev/null ; then
    echo "/backup still mounted"
    exit 1
fi
echo "/backup umounted..."

rm -rf /backup
if [ -d /backup ] ; then
    echo "/backup still exists"
    exit 1
fi
echo "/backup deleted..."

if [ $FSCK -eq 1 ] ; then
    echo "Executing FSCK"
    fsck.ext4 -f /dev/mapper/backup
    sync
    echo "sync has finished..."
fi

$CRYPTSETUP luksClose /dev/mapper/backup
if [ -e /dev/mapper/backup ] ; then
    echo "/dev/mapper/backup still exists"
    exit 1
fi
echo "/dev/mapper/backup removed..."

# DEVICE=$(echo "/dev/$1" | sed -e 's/[0-9]$//')
echo "DONE"
