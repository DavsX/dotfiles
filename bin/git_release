#!/bin/bash

set -e

if [ $# -ne 1 ] ; then
	echo "ERROR: usage '$0 [major|minor|patch]'"
	exit 1
fi

if ! [[ "$1" == "major" || "$1" == "minor" || "$1" == "patch" ]] ; then
	echo "ERROR: not recognized parameter $1"
	echo "ERROR: usage '$0 [major|minor|patch]'"
	exit 1
fi

REMOTE_ORIGIN=$(git remote 2>/dev/null | grep origin)
if [ "$REMOTE_ORIGIN" != "origin" ] ; then
	echo "ERROR: missing remote origin"
	exit 1
fi

git fetch origin

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
if [ "$CURRENT_BRANCH" != "develop" ] ; then
	echo "ERROR: not on branch develop"
	exit 1
fi

BRANCHES=$(git branch -a | grep release | sed -e 's#^\s*##g' | grep -vP '^remotes/(?!origin)' | sed -e 's#remotes/origin/##g' -e 's#release/rel##g' | sort -V | uniq)

CURRENT_RELEASE=$(echo -e "$BRANCHES" | tail -n 1)

CURRENT_RELEASE=${CURRENT_RELEASE:-"0.0.0"}

IFS=$'.' read MAJOR_VER MINOR_VER PATCH_VER <<< "$CURRENT_RELEASE"

MAJOR_VER=${MAJOR_VER:-0}
MINOR_VER=${MINOR_VER:-0}
PATCH_VER=${PATCH_VER:-0}

if [ "$1" == "major" ] ; then
	MAJOR_VER=$(($MAJOR_VER+1))
	MINOR_VER=0
	PATCH_VER=0
elif [ "$1" == "minor" ] ; then
	MINOR_VER=$(($MINOR_VER+1))
	PATCH_VER=0
elif [ "$1" == "patch" ] ; then
	PATCH_VER=$(($PATCH_VER+1))
fi
NEW_RELEASE="${MAJOR_VER}.${MINOR_VER}.${PATCH_VER}"

echo "CURRENT_RELEASE:$CURRENT_RELEASE"

read -p "Create release 'release/rel$NEW_RELEASE'? <y/n> " RESULT
[[ "$RESULT" != "y" ]] && { echo "ABORTING"; exit; }

git checkout -b "release/rel$NEW_RELEASE"
git push origin HEAD

git checkout master
git merge --ff-only "release/rel$NEW_RELEASE"
if [ "$?" != "0" ] ; then
	echo -e "\e[31m\e[1mError during merge into master\e[0m"
fi
git push origin HEAD

git checkout develop

echo "DONE"
