" vimrc by Davs
" Vundle {{{
colorscheme desert

filetype off

set rtp+=/home/davs/.vim/bundle/vundle
call vundle#rc()

Plugin 'gmarik/vundle'

Plugin 'rhysd/clever-f.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-rooter'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'jnurmine/Zenburn'
"Plugin 'ervandew/supertab'

" Elixir
Plugin 'elixir-lang/vim-elixir'
Plugin 'tpope/vim-endwise'

" Clojure
"Plugin 'guns/vim-sexp'
"Plugin 'tpope/vim-fireplace'
"Plugin 'tpope/vim-sexp-mappings-for-regular-people'
"Plugin 'kien/rainbow_parentheses.vim'
"Plugin 'dgrnbrg/vim-redl'

" golang
"Plugin 'fatih/vim-go.git'

" snipMate
"Plugin 'tomtom/tlib_vim'
"Plugin 'MarcWeber/vim-addon-mw-utils'
"Plugin 'garbas/vim-snipmate'

" Python
" Plugin 'davidhalter/jedi-vim'
" Plugin 'nvie/vim-flake8'
" Plugin 'vim-scripts/Python-Syntax-Folding'

" Ruby
" Plugin 'tpope/vim-endwise'
" Plugin 'thoughtbot/vim-rspec'
" Plugin 'Keithbsmiley/rspec.vim'

" JS
" Plugin 'mklabs/vim-backbone'
" Plugin 'jelera/vim-javascript-syntax'
" Plugin 'pangloss/vim-javascript'

" Perl
Plugin 'DavsX/vim_test_runner'
"Plugin 'DavsX/vim_time_since_last_commit'

" HTML
" Plugin 'rstacruz/sparkup'

filetype indent on
filetype plugin on
syntax on
" }}}
" Basic settings {{{
set nocp
set encoding=utf-8
set history=999                " history size
set lazyredraw                 " don't redraw when executing macros (good performance option)
set hidden                     " hide buffers instead of closing them
set backspace=indent,eol,start " allow backspace in insert mode
set errorformat=%f:%l:%m
set autowrite
set nobackup
set noswapfile
set scrolloff=3                " when moving vertically set 3 lines to the cursor
set mousehide
set mouse=niv
set number
set relativenumber
set splitbelow
set splitright
set nojoinspaces
set clipboard=unnamedplus
set iskeyword-=:

set switchbuf=useopen,usetab,newtab

set complete-=i

" Word wrap not in the middle of the word
set formatoptions=l
set lbr

" fast exiting insert mode; the removes the 1sec delay when not in GUI
set timeout timeoutlen=1000 ttimeoutlen=1000
if !has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

let g:sh_noisk=1
" }}}
" cmdline {{{
set cmdheight=1             "command line size
set showcmd                 "show last command
set wildmenu                "cmdline completition
" }}}
" Leader {{{
let mapleader = ","
let maplocalleader = "\\"
" }}}
" Search {{{
set showmatch
set hlsearch
set incsearch

nnoremap <leader>. :nohl<CR>

set ignorecase

" very magic mode for regexes
nnoremap <leader>/ /\v

vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>
nnoremap <leader>rw viw"hy:s/<C-r>h//g<left><left>
" }}}
" Indents {{{
set autoindent
set copyindent

vnoremap > >gv
vnoremap < <gv

nnoremap > >>
nnoremap < <<
" }}}
" Tabs {{{
set shiftwidth   =4             "number of spaces for indenting
set tabstop      =4             "number of spaces for tabs
set softtabstop  =4             "number of spaces for tabs while editing
" }}}
" NIKE {{{
if filereadable("/home/davs/.nike")
    set modelines=0
    set noexpandtab
else
	" gives 4 lines for modelines (vim meta at the beginning/end of files)
	set modelines=4
    set expandtab
endif
" }}}
" Statusline {{{
set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%{fugitive#statusline()} "git branch"
set statusline +=%4*\ %<%-.40F%*        "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%4v\ %*             "virtual column number
set statusline +=%2*0x%04B\ %*          "character under cursor
" }}}
" Gui {{{
set ruler
set rulerformat=%m\ [%l/%L\ %v]

set guifont=DejaVu\ Sans\ Mono\ 11

set guioptions=
set guioptions+=a "autoselect
set guioptions+=e "tabs
set guioptions+=g "grey menu items
set guioptions+=i "vim icon
set guioptions+=t "tearoff menu items

set guitablabel=%t          "show only filename in tabs

set t_Co=256
colorscheme zenburn

" Horizontal split fill chars
set fillchars+=stlnc:-
set fillchars+=stl:-
set fillchars+=vert:\|

if has('gui_running')
    hi VertSplit guifg=fg guibg=bg
else
    hi VertSplit ctermfg=bg ctermbg=fg
endif

hi CursorLine cterm=NONE ctermbg=239
hi Search cterm=underline

set title
set noerrorbells
set showmode
" }}}
" Diff {{{
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red

set nocursorbind
set noscrollbind
nnoremap db :windo set scrollbind!<CR>
nnoremap du :windo diffupdate<CR>
" }}}
" Basic maps {{{
nnoremap ; :
noremap <leader>w :w<CR>
nnoremap qt <C-W><C-C>
nnoremap qw <C-W><C-W>
nnoremap qe :tabprev<CR>
nnoremap qr :tabnext<CR>

if has('nvim')
    tnoremap <a-q> <c-\><c-n>
    tnoremap <a-w> <c-\><c-n><c-w><c-w>
    nnoremap <a-q> <c-\><c-n>
    nnoremap <a-w> <c-\><c-n><c-w><c-w>

    nnoremap <leader>ri <c-w><c-w>i<UP><c-\><c-n>:sleep 10m<CR>i<CR><c-\><c-n><c-w><c-w>
endif

" maximize current split
nnoremap qa <C-W>_<C-W><BAR>
" move to next split and maximize it
nnoremap qs <C-W><C-W><C-W>_<C-W><BAR>

"disable ex-mode
nnoremap Q <NOP>

"move to matching brace pair
nnoremap <tab> %

"split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

inoremap <c-f> <c-x><c-f>

nnoremap ds<space> F<space>xf<space>x
" }}}
" Movement maps {{{
" H beginning of line; L end of line
nnoremap H ^
nnoremap L g_

vnoremap H ^
vnoremap L g_

onoremap H ^
onoremap L g_

" j/k move in wrapped lines too
nnoremap j gj
nnoremap k gk

vnoremap j gj
vnoremap k gk

" move to the top/middle/bottom of the screen
nnoremap gt :normal! H<CR>
nnoremap gb :normal! L<CR>
nnoremap gm :normal! M<CR>
" }}}
" Row/column highlight {{{
noremap <F2> :set number!<CR>:set relativenumber!<CR>
noremap <F3> :set cursorline!<CR>
noremap <F4> :set cursorcolumn!<CR>
" }}}
" Tabs {{{
noremap <c-t> :tabnew<CR>
" }}}
" Filetype {{{
" EveryFile {{{
augroup all_file_type
    autocmd!
    if v:version < 703
        autocmd WinEnter,FocusGained,BufEnter * setlocal relativenumber
        autocmd WinLeave,FocusLost,BufLeave * setlocal norelativenumber
    endif
    autocmd BufWritePre * %s/\s\+$//e

    autocmd WinEnter,FocusGained,BufEnter * if &diff | setlocal wrap | setlocal nocursorbind | endif
    autocmd WinEnter,FocusGained,BufEnter * if !&diff | setlocal winwidth=100 | endif
augroup END
" }}}
" Elixir {{{
augroup filetype_elixir
    autocmd!
    autocmd BufRead,BufWritePre,FileType elixir execute ":Rooter"

    autocmd BufRead,BufNewFile *.ex  if line('$') == 1 && getline('.') == '' | call NewElixirModule() | endif
    autocmd BufRead,BufNewFile *.exs if line('$') == 1 && getline('.') == '' | call NewElixirModule() | endif

    if has('nvim')
        autocmd FileType elixir nnoremap <leader>ri <c-w><c-w>i<UP><c-\><c-n>:sleep 10m<CR>i<CR><c-\><c-n><c-w><c-w>
    endif

	autocmd FileType elixir nnoremap <buffer> <leader>ei :call ElixirIOinspect()<CR>

    autocmd FileType elixir nnoremap <buffer> <leader>rr :!elixir %<CR>
    autocmd FileType elixir nnoremap <buffer> <leader>rm :!mix<CR>
    autocmd FileType elixir nnoremap <buffer> <leader>tf :!mix test<CR>
    autocmd FileType elixir nnoremap <buffer> <leader>tl :execute ":!mix test ".expand('%').":".line('.')<CR>
augroup END
" }}}
" Perl {{{
augroup filetype_perl
    autocmd!
    autocmd BufRead,BufNewFile *.pm  setfiletype perl
    autocmd BufRead,BufNewFile *.pl  setfiletype perl
    autocmd BufRead,BufNewFile *.t   setfiletype perl

    autocmd BufNewFile *.pl 0r /home/davs/.vim/skeleton/perl.script
    autocmd BufNewFile *.t 0r /home/davs/.vim/skeleton/perl.test

    autocmd BufRead,BufNewFile *.pm if line('$') == 1 && getline('.') == '' | call NewPerlModule() | endif

    "autocmd BufWritePost * if &filetype=='perl' | call Check_time_since_last_commit() | endif

    autocmd BufRead,BufWritePre,FileType perl execute ":Rooter"

    autocmd BufRead,BufNewFile *.pm  setlocal filetype=perl
    autocmd BufRead,BufNewFile *.pl  setlocal filetype=perl
    autocmd BufRead,BufNewFile *.t   setlocal filetype=perl

    autocmd FileType perl setlocal iskeyword-=:

    autocmd FileType perl setlocal nowrap
    "autocmd FileType perl setlocal foldlevel=1
    "autocmd FileType perl setlocal foldlevelstart=20
    "autocmd FileType perl setlocal foldnestmax=2
    "autocmd FileType perl let perl_include_pod = 1
    "autocmd FileType perl let perl_extended_vars = 1
    "autocmd FileType perl let perl_fold = 1
    "autocmd FileType perl let perl_fold_blocks = 1

    autocmd FileType perl syn region perlSubFold start="^\z(\s*\)\<subtest\>.*[^};]$" end="^\z1};\s*$" transparent fold keepend
    autocmd FileType perl syn region perlSubFold start="^\z(\s*\)\<txn_subtest\>.*[^};]$" end="^\z1};\s*$" transparent fold keepend
    autocmd FileType perl hi Statement ctermfg=14

    autocmd FileType perl nnoremap <buffer> <leader>dd <ESC>ause v5.10;<CR>use Data::Dumper;<CR>local $Data::Dumper::Sortkeys = 1;<CR>local $Data::Dumper::Maxdepth = 2;<CR>say STDERR Dumper();<LEFT><LEFT>
    autocmd FileType perl nnoremap <buffer> <leader>so <ESC>vapk:sort<CR>

    autocmd FileType perl nnoremap <buffer> gu :!grep -rP '(::<BAR>\->)<c-r>=expand("<cword>")<CR>'<CR>

    autocmd FileType perl nnoremap <buffer> <leader>rr :!perl %<CR>

    autocmd FileType perl nnoremap <buffer> <leader>tf :PerlTestFile<CR>
    autocmd FileType perl nnoremap <buffer> <leader>ta :PerlTestAll<CR>
    autocmd FileType perl nnoremap <buffer> <leader>td :PerlTestDir<CR>
    autocmd FileType perl nnoremap <buffer> <leader>tc :PerlTestCreate<CR>
    autocmd FileType perl nnoremap <buffer> <leader>to :PerlTestDirOpen<CR>
augroup END
" }}}
" HTML {{{
augroup filetype_html
    autocmd!
    autocmd BufRead,BufNewFile *.tt setfiletype html
    autocmd BufRead,BufNewFile *.tt setlocal foldmethod=marker

    autocmd BufRead,BufWritePre,FileType html execute ":Rooter"

    autocmd FileType html setlocal foldlevel=99
    autocmd FileType html setlocal shiftwidth=2
    autocmd FileType html setlocal tabstop=2
    autocmd FileType html setlocal softtabstop=2
    autocmd FileType html setlocal expandtab

    autocmd FileType html highlight link htmlLink text
    autocmd FileType html syn region htmlLink start="<a\>\_[^>]*\<href\>" end="</a>"me=e-4 keepend contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLinkText,javaScript,@htmlPreproc
    autocmd FileType html syn match htmlLinkText contained contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLinkText,javaScript,@htmlPreproc "^\s*\zs.\{-}\ze\s*$"
    autocmd FileType html syn match htmlLinkText contained contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLinkText,javaScript,@htmlPreproc "\S.\{-}\ze\s*$"
    autocmd FileType html highlight def link htmlLinkText Underlined

    autocmd FileType html iabbrev <buffer> nbsp &nbsp;
augroup END
" }}}
" vim {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd FileType vim setlocal foldlevel=0

    autocmd FileType vim noremap <buffer> <leader>ss  :w<CR>:source %<CR>:e <CR>
augroup END
" }}}
" javascript {{{
augroup filetype_js
    autocmd!

    autocmd BufRead,BufWritePre,FileType javascript execute ":Rooter"

    autocmd FileType javascript setlocal shiftwidth=2
    autocmd FileType javascript setlocal softtabstop=2
    autocmd FileType javascript setlocal expandtab
    autocmd FileType javascript setlocal foldmethod=indent
    autocmd FileType javascript setlocal foldlevelstart=20
    autocmd FileType javascript let javaScript_fold=1
augroup END
" }}}
" CursorLine {{{
augroup CursorLine
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END
" }}}
" ruby {{{
augroup filetype_ruby
    autocmd!

    autocmd BufRead,BufWritePre,FileType ruby execute ":Rooter"

    autocmd FileType ruby,eruby let ruby_fold = 1
    autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
    autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

    autocmd FileType ruby,eruby setlocal shiftwidth=2
    autocmd FileType ruby,eruby setlocal softtabstop=2
    autocmd FileType ruby,eruby setlocal expandtab

    autocmd FileType ruby nnoremap <buffer> <leader>rr :!ruby %<CR>
augroup END
" }}}
" Clojure {{{
augroup filetype_clojure
    autocmd!
    autocmd BufRead,BufWritePre,FileType clojure execute ":Rooter"

    autocmd Syntax clojure syn match clojureRoundParen "("
    autocmd Syntax clojure syn match clojureRoundParen ")"
    autocmd Syntax clojure RainbowParenthesesActivate
    autocmd Syntax clojure RainbowParenthesesLoadRound
    autocmd Syntax clojure highlight clojureRoundParen cterm=bold

    autocmd FileType clojure let b:delimitMate_quotes = '"'

    autocmd FileType clojure nnoremap <buffer> <leader>rr :call RunClojure(0)<CR>
    autocmd FileType clojure nnoremap <buffer> <leader>re :call RunClojure(1)<CR>

    autocmd FileType clojure nmap <leader>F <Plug>FireplacePrint<Plug>(sexp_outer_top_list)``
    autocmd FileType clojure nmap <leader>f <Plug>FireplacePrint<Plug>(sexp_outer_list)``
    autocmd FileType clojure nmap <leader>e <Plug>FireplacePrint<Plug>(sexp_inner_element)``

    autocmd FileType clojure nnoremap ( ?[[({]<CR>:nohl<CR>
    autocmd FileType clojure nnoremap ) /[[({]<CR>:nohl<CR>
augroup END
" }}}
" }}}
" vimrc {{{
noremap <leader>se :tabnew $MYVIMRC<CR>
noremap <leader>ss :source $MYVIMRC<CR>
noremap <leader>sl :execute getline(".")<CR>
" }}}
" Folding {{{
set foldmethod=indent
set foldlevel =20 "open folds by default

noremap <space> za
" }}}
" Functions {{{
" ColorColumn {{{
set colorcolumn=100
highlight ColorColumn guibg=#333333 ctermbg=8
" }}}
" NewPerlModule {{{
function! NewPerlModule()
    0r ~/.vim/skeleton/perl.package
    let l:path = expand('%:p')
    let l:path = substitute(l:path, '^.*/\(lib\|t\)/', '', '')
    let l:path = substitute(l:path, '.pm$', '', '')
    let l:module_name = substitute(l:path, '/', '::', 'g')
    execute "normal! ggwi".l:module_name
endfunction
" }}}
" NexElixirModule {{{
function! NewElixirModule()
    " get the part between lib/ and .ex
    let l:path = substitute(expand('%:p'), '^.*/\(lib\|test\)/\(.*\).exs\?$', '\2', 'g')

    " insert defmodule and capitalize the first letter of the module name
    execute "normal! gg0idefmodule ".l:path." do\nend\<ESC>gg0W~"

    " delete _, capitalize next letter
    if getline(".") =~# '_'
        :s/\v_(.)/\u\1/g
    endif

    " replace / with ., capitalize next letter
    if getline(".") =~# '/'
        :s/\v\/(.)/.\u\1/g
    endif

    execute "normal! o"
    startinsert
endfunction
" }}}
" ElixirIOinspect {{{
function! ElixirIOinspect()
    " get the part between lib/ and .ex
	if getline(".") =~# '\v\s*IO\.inspect'
		execute "normal! ^dW"
	else
		execute "normal! ^iIO.inspect "
	endif
endfunction
" }}}
" RunPerlTest {{{
function! RunPerlTest(mode)
    let l:path = expand('%')

    let l:result = 0

    if a:mode == 'file'
        let l:result = RunTest(l:path)
    "elseif a:mode == 'class'
        "let l:class = GetPythonClassName()
        "let l:result = RunTest(l:path . ":" . l:class)
    "elseif a:mode == 'method'
        "let l:class = GetPythonClassName()
        "let l:method = GetPythonMethodName()
        "let l:result = RunTest(l:path .":". l:class .".". l:method)
    else
        let l:result = RunTest('t/')
    endif

    if l:result == 0
        let l:line = getqflist()[0]['text']

        let l:list = matchlist(l:line, '\vFile "([^"]*)", line (\d+)')
        if !empty(l:list)
            let l:file = l:list[1]
            let l:line_no = l:list[2]

            if l:file =~# getcwd()
                if l:file == expand('%:p')
                    execute "normal! ".l:line_no."G"
                else
                    execute "badd +".l:line_no." ".l:file
                    execute "vert sbuffer " . l:file
                    execute "normal! ".l:line_no."G"
                endif
            endif
            copen
            wincmd k
        else
            let l:bufname = fnamemodify(buffer_name(getqflist()[0]['bufnr']), ':p')
            if l:bufname =~# getcwd()
                cc!
            else
                copen
            endif
        endif
    endif
endfunction
" }}}
" CloseHiddenbuffers {{{
nnoremap <leader>cl :call CloseHiddenBuffers()<CR>
function! CloseHiddenBuffers()
    let visible_buffers = {}

    for tab in range(1, tabpagenr('$'))
        for buffer in tabpagebuflist(tab)
            let visible_buffers[buffer] = 1
        endfor
    endfor

    for buffer in range(1, bufnr('$'))
        if bufloaded(buffer) && !has_key(visible_buffers, buffer)
            execute 'bd ' . buffer
        endif
    endfor

    execute "NERDTree | NERDTreeToggle"
endfunction
" }}}
" RunClojure {{{
function! RunClojure(reload)
    "autocmd FileType clojure nnoremap <buffer> <leader>re :Eval (remove-ns (ns-name *ns*)) \| Require \| Eval (-main)<CR>
    if exists("g:fireplace_nrepl_sessions")
        if a:reload
            execute ":Eval (clojure.core/remove-ns (clojure.core/ns-name clojure.core/*ns*))"
            execute ":Require"
        else
            execute ":Eval (-main)"
        endif
    else
        execute ":!lein run"
    endif
endfunction
" }}}
" DeleteFile {{{
function! DeleteFile()
    let l:path = expand('%:p')
    let l:confirm = input('Delete '.l:path.'? [YES]: ')
    if l:confirm ==# 'YES'
        call delete(l:path) | bdelete!
    endif
endfunction
" }}}
" }}}
" Plugin settings {{{
" Tabularize {{{
vnoremap <leader>ah :Tabularize /^.\{-}\zs=>/l1l1<CR>
vnoremap <leader>a= :Tabularize /^.\{-}\zs=\(>\)\@!/l1l1<CR>
vnoremap <leader>a, :Tabularize /^.\{-}\zs,/l1l1<CR>
vnoremap <leader>aa :Tabularize /
vnoremap <leader>af :Tabularize /^.\{-}\zs/l1l1<left><left><left><left><left>

nnoremap <leader>ah :Tabularize /^.\{-}\zs=>/l1l1<CR>
nnoremap <leader>a= :Tabularize /^.\{-}\zs=\(>\)\@!/l1l1<CR>
nnoremap <leader>a, :Tabularize /^.\{-}\zs,/l1l1<CR>
nnoremap <leader>aa :Tabularize /
nnoremap <leader>af :Tabularize /^.\{-}\zs/l1l1<left><left><left><left><left>
" }}}
" ctrlp {{{
set runtimepath^=/home/davs/.vim/bundle/ctrlp.vim
let g:ctrlp_regexp = 0
let g:ctrlp_by_filename = 0
let g:ctrlp_custom_ignore = {
    \ 'dir': '\v(\.git|venv|deps|_build)',
    \ 'file': '\v(__init2__\.py|\.pyc)$',
    \ }

nnoremap <leader>, :CtrlP<CR>
" }}}
" Clever-f {{{
let g:clever_f_across_no_line = 0
" }}}
" Rooter {{{
let g:rooter_patterns = [ '.git/', '.vimproject' ]
let g:rooter_manual_only = 0
let g:rooter_change_directory_for_non_project_files = 0
" }}}
" snippets {{{
let g:snips_author = "David Kovacs [DavsX]"
let g:snips_email = "kovdavid@gmail.com"
let g:snips_github = "http://github.com/DavsX"
" }}}
" test_class_runner {{{
let $TEST_PRETTY_COLOR_NAME  = 'bright_green'
let $TAP_ELAPSED_FORMAT  = '%t1 elapsed'
let g:perl_test_args_perl   = '-MTest::Pretty -It/lib -Ilib'
let g:perl_test_args_prove  = '-It/lib -Ilib -j9 --timer'
let g:perl_test_all_command = 'fprove'
" }}}
" NERDTree {{{
nnoremap <F5> :NERDTreeToggle<CR>
nnoremap <S-F5> :NERDTreeFind<CR>
let NERDTreeIgnore = ['\.pyc$']
let NERDTreeChDirMode=0
" }}}
" Fugitive {{{
nnoremap gst :Gstatus<CR>5j
nnoremap gd :Gvdiff<CR>
nnoremap gci :let @f=expand("%:t:r")<CR>:Gwrite <BAR> Gcommit<CR>O<C-R>f:<space>
nnoremap gca :Gwrite <BAR> Gcommit --amend<CR>ggA
" }}}
" vim-sexp {{{
let g:sexp_enable_insert_mode_mappings=0
let g:sexp_insert_after_wrap=1
let g:sexp_mappings = {
    \ 'sexp_move_to_prev_bracket': 'g9',
    \ 'sexp_move_to_next_bracket': 'g0',
    \ }
" }}}
" rainbow_parentheses {{{
let g:rbpt_colorpairs = [
    \ [9, 9],
    \ [13, 13],
    \ [2, 2],
    \ [11, 11],
    \ [15, 15],
    \ ]
" }}}
" vim-go {{{
let g:go_fmt_command="goimports"
" }}}
" supertab {{{
let g:SuperTabDefaultCompletionType="<c-x><c-o>"
let g:SuperTabClosePreviewOnPopupClose=1
" }}}
" NERDCommenter {{{
let g:NERDCustomDelimiters = {
            \ 'elixir': { 'left': '#' }
            \}
" }}}
" }}}
