" vimrc by Davs
" vim-plug {{{
" let g:plug_home = "/opt/vim-plugged"
call plug#begin()
Plug 'rhysd/clever-f.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'Raimondi/delimitMate'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-rooter'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'jnurmine/Zenburn'
Plug 'altercation/vim-colors-solarized'
Plug 'tpope/vim-endwise'
Plug 'junkblocker/git-time-lapse'
Plug 'benekastah/neomake'
Plug 'DavsX/vim_test_runner', { 'for': 'perl' }
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'rickhowe/diffchar.vim'
Plug 'ervandew/supertab'

Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'jodosha/vim-godebug', { 'for': 'go' }

if has('nvim')
    " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
endif

call plug#end()
" }}}
" Basic settings {{{
if !has('nvim')
    set nocp
    set encoding=utf-8
endif
set history=999  " history size
set lazyredraw   " don't redraw when executing macros (good performance option)
set ttyfast
" set hidden       " hide buffers instead of closing them
set backspace=indent,eol,start " allow backspace in insert mode
set errorformat=%f:%l:%m
set nobackup
set noswapfile
set scrolloff=3  " when moving vertically set 3 lines to the cursor
set mousehide
set mouse=niv
set number
set relativenumber
set splitbelow
set splitright
set nojoinspaces
set clipboard=unnamedplus,unnamed " add two more registers to clipboard
set iskeyword-=:

set switchbuf=useopen,usetab,newtab
set tags=./tags;/
set complete-=i

" Word wrap not in the middle of the word
set formatoptions=l
set lbr

" fast exiting insert mode; the removes the 1sec delay when not in GUI
set timeout timeoutlen=1000 ttimeoutlen=1000
if !has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

if isdirectory($VIM_UNDODIR)
    set undodir=$VIM_UNDODIR
    set undofile
endif

if isdirectory($VIM_SWAPDIR)
    set directory=$VIM_SWAPDIR//
    set swapfile
endif

let g:sh_noisk=1
" }}}
" cmdline {{{
set cmdheight=1 "command line size
set showcmd     "show last command
set wildmenu    "cmdline completition
" }}}
" Leader {{{
let mapleader = ","
let maplocalleader = "\\"
" }}}
" Search {{{
set showmatch
set hlsearch
set incsearch

nnoremap <leader>. :nohl<CR>
nnoremap <leader>> :let @/ = '\<'.expand('<cword>').'\>'\|set hlsearch<CR>
nnoremap <leader>? :let @/ = expand('<cword>')\|set hlsearch<CR>

set ignorecase

" very magic mode for regexes
nnoremap <leader>/ /\v

vnoremap <C-r> :call ReplaceSelection()<CR>
nnoremap <leader>rw viw"hy:s/<C-r>h//g<left><left>
" }}}
" Indents {{{
set autoindent
set copyindent

vnoremap > >gv
vnoremap < <gv

nnoremap > >>
nnoremap < <<
" }}}
" Tabs {{{
set shiftwidth=4  " number of spaces for indenting
set tabstop=4     " number of spaces for tabs
set softtabstop=4 " number of spaces for tabs while editing
set shiftround
set modelines=0

set list
set listchars=tab:▸\ ,trail:·
" }}}
" NIKE {{{
if filereadable(expand("~") . "/.nike")
    set noexpandtab
else
    set expandtab
endif
" }}}
" Statusline {{{
set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%{fugitive#statusline()} "git branch"
set statusline +=%4*\ %<%-.40F%*        "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%4v\ %*             "virtual column number
set statusline +=%2*0x%04B\ %*          "character under cursor
" }}}
" Gui {{{
set ruler
set rulerformat=%m\ [%l/%L\ %v]

set guifont=DejaVu\ Sans\ Mono\ 11

set guioptions=
set guioptions+=a "autoselect
set guioptions+=e "tabs
set guioptions+=g "grey menu items
set guioptions+=i "vim icon
set guioptions+=t "tearoff menu items

set guitablabel=%t          "show only filename in tabs

set t_Co=256
set colorcolumn=120
if filereadable("/tmp/.Xresources_solarized")
    set background=light
    colorscheme solarized
    highlight CursorLine cterm=NONE ctermbg=253
    highlight ColorColumn guibg=#333333 ctermbg=253
else
    colorscheme zenburn
    highlight CursorLine cterm=NONE ctermbg=239
    highlight ColorColumn guibg=#333333 ctermbg=8
endif

" Horizontal split fill chars
set fillchars+=stlnc:-
set fillchars+=stl:-
set fillchars+=vert:\|

if has('gui_running')
    hi VertSplit guifg=fg guibg=bg
else
    hi VertSplit ctermfg=bg ctermbg=fg
endif

hi Search cterm=underline

set title
set noerrorbells
set showmode
" }}}
" Diff {{{
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red

set nocursorbind
set noscrollbind
nnoremap <leader>db :windo set scrollbind!<CR>
nnoremap <leader>du :windo diffupdate<CR>
nnoremap <leader>dw :windo set diffopt+=iwhite<CR>
" }}}
" Basic maps {{{
nnoremap ; :
noremap <leader>w :w<CR>
nnoremap qt <C-W><C-C>
nnoremap qw <C-W><C-W>
nnoremap qe :tabprev<CR>
nnoremap qr :tabnext<CR>

vnoremap <leader>jf :!python -m json.tool<CR>
vnoremap <leader>ujf :!perl -MJSON::XS -e 'my $json = do { local $/; <STDIN> }; print encode_json(decode_json($json))'<CR>
vnoremap <leader>xf :!xmllint --format -<CR>
vnoremap <leader>sf :!sqlformat -r -s -<CR>
vnoremap <leader>pf :!perl -e 'use Data::Dumper; my $lines = do { local $/ = undef; <STDIN> }; print Dumper(eval $lines);'<CR>
vnoremap <c-f> "sy/<C-R>s<CR>


" maximize current split
nnoremap qa <C-W>_<C-W><BAR>
" move to next split and maximize it
nnoremap qs <C-W><C-W><C-W>_<C-W><BAR>

" yank line
nnoremap yu yy

"disable ex-mode; run macros instead
nnoremap Q @q
xnoremap Q :normal @q <CR>

"move to matching brace pair
nnoremap <tab> %

"split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

inoremap <c-f> <c-x><c-f>

nnoremap ds<space> F<space>xf<space>x

nnoremap <leader>tw :%s/\s\+$//e<CR>
" }}}
" Movement maps {{{
" H beginning of line; L end of line
nnoremap H ^
nnoremap L g_

vnoremap H ^
vnoremap L g_

onoremap H ^
onoremap L g_

" j/k move in wrapped lines too
nnoremap j gj
nnoremap k gk

vnoremap j gj
vnoremap k gk

" move to the top/middle/bottom of the screen
nnoremap gt :normal! H<CR>
nnoremap gb :normal! L<CR>
nnoremap gm :normal! M<CR>

nnoremap <c-\> :po<CR>
" }}}
" Row/column highlight {{{
noremap <F2> :call ToggleLineNumbers()<CR>
noremap <F3> :set cursorline!<CR>
noremap <F4> :set cursorcolumn!<CR>
noremap <F6> :set list!<CR>
noremap <f7> :GitGutterToggle<CR>
" }}}
" Tabs {{{
noremap <c-t> :tabnew<CR>
" }}}
" Filetype {{{
" EveryFile {{{
augroup all_file_type
    autocmd!

    autocmd WinEnter,FocusGained,BufEnter * setlocal relativenumber | setlocal number
    autocmd WinLeave,FocusLost,BufLeave * setlocal norelativenumber | setlocal number
    autocmd BufWritePre * %s/\s\+$//e

    autocmd BufEnter * silent execute ":Rooter"

    " Turn off syntax syncing for large files
    autocmd BufEnter * if line2byte(line("$") + 1) > 1000000 | syntax clear | endif

    autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

    autocmd WinEnter,FocusGained,BufEnter * if &diff | setlocal winwidth=1 | setlocal wrap | setlocal nocursorbind | endif
    autocmd WinEnter,FocusGained,BufEnter * if !&diff | setlocal winwidth=121 | endif

    autocmd Syntax * highlight SpecialKey ctermfg=240 gui=bold guifg=#5b605e
    autocmd Syntax * highlight NonText ctermfg=240 gui=bold guifg=#5b605e

    autocmd BufEnter * let &titlestring = $USER."@".hostname().":".expand("%:p")

    autocmd BufRead,BufNewFile *.xml.sample  setfiletype xml
    autocmd BufRead,BufNewFile *.sls setfiletype yaml
augroup END
" }}}
" golang {{{
augroup filetype_golang
    autocmd!
    autocmd FileType go setlocal shiftwidth=4
    autocmd FileType go setlocal tabstop=4
    autocmd FileType go setlocal softtabstop=4

    autocmd BufRead,BufNewFile *.go if line('$') == 1 && getline('.') == '' | call NewGoFile() | endif
    autocmd BufWritePost *.go Neomake

    autocmd FileType go nnoremap <buffer> <leader>dd o<ESC>ifmt.Printf("%+v\n", )<LEFT>
    autocmd FileType go nnoremap <buffer> <leader>de o<ESC>ifmt.Printf("%+v\n")<CR>os.Exit(1)<ESC>:GoImports<CR>k$i,

    autocmd FileType go let g:go_fmt_command = "goimports"
    autocmd FileType go let g:go_def_mode = "gopls"
    autocmd FileType go let g:go_info_mode = "gopls"
    autocmd FileType go let g:go_fmt_autosave = 1
    autocmd FileType go let g:go_fmt_fail_silently = 1

    autocmd FileType go let g:neomake_error_sign   = {'text': '✖', 'texthl': 'NeomakeErrorSign'}
    autocmd FileType go let g:neomake_warning_sign = {'text': '∆', 'texthl': 'NeomakeWarningSign'}
    autocmd FileType go let g:neomake_message_sign = {'text': '➤', 'texthl': 'NeomakeMessageSign'}
    autocmd FileType go let g:neomake_info_sign    = {'text': 'ℹ', 'texthl': 'NeomakeInfoSign'}
    autocmd FileType go let g:neomake_go_enabled_makers = [ 'go' ]

    autocmd FileType go noremap <buffer> <leader>rr :!go run %<CR>
    autocmd FileType go noremap <buffer> <leader>i :GoInfo<CR>
    autocmd FileType go noremap <buffer> <leader>b :GoBuild -i<CR>
    autocmd FileType go noremap <buffer> <leader>ts :GoInstall<CR>
    autocmd FileType go noremap <buffer> <leader>gi :GoImports<CR>
    autocmd FileType go noremap <buffer> <leader>tf :GoTestFunc<CR>
    autocmd FileType go noremap <buffer> <leader>ta :GoTest<CR>
    autocmd FileType go noremap <buffer> <leader>aa :GoAlternate<CR>

    autocmd FileType go noremap <buffer> <leader>ger oif err != nil {<CR>return err<CR>}
    autocmd FileType go noremap <buffer> <leader>gel oif err != nil {<CR>log.Fatal(err)<CR>}
    autocmd FileType go noremap <buffer> <leader>get oif err != nil {<CR>t.Fatal(err)<CR>}
    autocmd FileType go noremap <buffer> <leader>gep oif err != nil {<CR>panic("")<CR>}<ESC>k$<LEFT><LEFT>i
augroup END
" }}}
" Perl {{{
augroup filetype_perl
    autocmd!
    autocmd BufRead,BufNewFile *.pm  setfiletype perl
    autocmd BufRead,BufNewFile *.pl  setfiletype perl
    autocmd BufRead,BufNewFile *.t   setfiletype perl

    autocmd BufNewFile *.pl 0r ~/.vim/skeleton/perl.script
    autocmd BufNewFile *.t 0r ~/.vim/skeleton/perl.test

    autocmd BufRead,BufNewFile *.pm if line('$') == 1 && getline('.') == '' | call NewPerlModule() | endif

    autocmd BufRead,BufNewFile *.pm  setlocal filetype=perl
    autocmd BufRead,BufNewFile *.pl  setlocal filetype=perl
    autocmd BufRead,BufNewFile *.t   setlocal filetype=perl

    autocmd FileType perl setlocal iskeyword-=:

    autocmd FileType perl setlocal nowrap

    autocmd FileType perl syn region perlSubFold start="^\z(\s*\)\<subtest\>.*[^};]$" end="^\z1};\s*$" transparent fold keepend
    autocmd FileType perl syn region perlSubFold start="^\z(\s*\)\<txn_subtest\>.*[^};]$" end="^\z1};\s*$" transparent fold keepend
    autocmd FileType perl hi Statement ctermfg=14

    autocmd FileType perl nnoremap <buffer> <leader>dd <ESC>ause v5.10;<CR>use Data::Dumper;<CR>local $Data::Dumper::Sortkeys = 1;<CR>local $Data::Dumper::Terse = 0;<CR>local $Data::Dumper::Indent = 2;<CR>local $Data::Dumper::Maxdepth = 2;<CR>say STDERR Dumper();<CR>exit;<UP><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT>
    autocmd FileType perl nnoremap <buffer> <leader>dt <ESC>ause v5.10;<CR>use Data::Dumper;<CR>local $Data::Dumper::Terse = 1;<CR>local $Data::Dumper::Indent = 0;<CR>local $Data::Dumper::Sortkeys = 1;<CR>local $Data::Dumper::Maxdepth = 2;<CR>say STDERR Dumper();<LEFT><LEFT>
    autocmd FileType perl nnoremap <buffer> <leader>so <ESC>vapk:sort<CR>

    " (?<!\$|@|%|{)
    autocmd FileType perl nnoremap <buffer> <leader>gu  :let @/=expand("<cword>")<CR>:!grep -rP  '<C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>
    autocmd FileType perl nnoremap <buffer> <leader>glu :let @/=expand("<cword>")<CR>:!grep -rlP '<C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>
    autocmd FileType perl nnoremap <buffer> <leader>gd  :let @/=expand("<cword>")<CR>:!grep -rP  'sub <C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>
    autocmd FileType perl nnoremap <buffer> <leader>gld :let @/=expand("<cword>")<CR>:!grep -rlP 'sub <C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>
    autocmd FileType perl nnoremap <buffer> <leader>ga  :let @/=expand("<cword>")<CR>:!grep -rP  '<C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>
    autocmd FileType perl nnoremap <buffer> <leader>gla :let @/=expand("<cword>")<CR>:!grep -rlP '<C-R>=expand("<cword>")<CR>' bin/ lib/ t/<CR>

    autocmd FileType perl nnoremap <buffer> <leader>rr :!perl -Ilib %<CR>

    vnoremap <leader>pt :!perltidy<CR>
    nnoremap <leader>pt :%!perltidy<CR>

    autocmd FileType perl nnoremap <buffer> <leader>ts  :!perl -Ilib -c %<CR>
    autocmd FileType perl nnoremap <buffer> <leader>tf  :PerlTestFile<CR>
    autocmd FileType perl nnoremap <buffer> <leader>tpf :PerlProveTestFile<CR>
    autocmd FileType perl nnoremap <buffer> <leader>ta  :PerlTestAll<CR>
    autocmd FileType perl nnoremap <buffer> <leader>td  :PerlTestDir<CR>
    autocmd FileType perl nnoremap <buffer> <leader>tc  :PerlTestCreate<CR>
    autocmd FileType perl nnoremap <buffer> <leader>to  :PerlTestDirOpen<CR>
    autocmd FileType perl nnoremap <buffer> <leader>mt  :call PerlOpenModule(1)<CR>
    autocmd FileType perl nnoremap <buffer> <leader>ms  :call PerlOpenModule(2)<CR>
    autocmd FileType perl nnoremap <buffer> <leader>mv  :call PerlOpenModule(3)<CR>
    autocmd FileType perl nnoremap <buffer> <leader>mm  :call PerlOpenModule(4)<CR>
    autocmd FileType perl nnoremap <buffer> <leader>me  :Explore<CR>

    autocmd BufRead,BufNewFile $NIKE_HOME/* setlocal noexpandtab

    if len($PERL_TEST_FILE_COMMAND) > 0
        autocmd FileType perl let g:perl_test_file_command = $PERL_TEST_FILE_COMMAND
    endif

    autocmd FileType perl nnoremap gci :call CommitPerlFiles()<CR>

    autocmd FileType perl nnoremap <buffer> <leader>ps 0f$lviw"hyouse v5.10; say "<C-r>h: $<C-r>h";<ESC>
    autocmd FileType perl nnoremap <buffer> <leader>pd 0f$lviw"hyouse v5.10; use Data::Dumper; local $Data::Dumper::Sortkeys = 1; local $Data::Dumper::Maxdepth = 2;<CR>say "<C-r>h: ".Dumper($<C-r>h);<ESC>
    autocmd FileType perl vnoremap <buffer> <leader>pd :call PerlDumpVariables()<CR>
augroup END
" }}}
" vim {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd FileType vim setlocal foldlevel=0
    autocmd FileType vim setlocal expandtab

    autocmd FileType vim noremap <buffer> <leader>ss  :w<CR>:source %<CR>:e <CR>
    autocmd FileType vim noremap <buffer> <leader>rr  :source %<CR>
augroup END
" }}}
" CursorLine {{{
augroup CursorLine
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END
" }}}
" sh {{{
augroup sh
    autocmd!
    autocmd FileType sh nnoremap <buffer> <leader>rr :!bash %<CR>
augroup END
" }}}
" jinja {{{
augroup jinja
    autocmd!
    autocmd FileType jinja setlocal expandtab
    autocmd FileType jinja setlocal autoindent
    autocmd FileType jinja setlocal tabstop=2
augroup END
" }}}
" vimrc {{{
noremap <leader>se :tabnew $MYVIMRC<CR>
noremap <leader>ss :source $MYVIMRC<CR>
noremap <leader>sl :execute getline(".")<CR>
" }}}
" }}}
" Folding {{{
set foldmethod=indent
set foldlevel=20 "open folds by default

noremap <space> za
" }}}
" Functions {{{
" NewPerlModule {{{
function! NewPerlModule()
    0r ~/.vim/skeleton/perl.package
    let l:path = expand('%:p')
    let l:path = substitute(l:path, '^.*/\(lib\|t\)/', '', '')
    let l:path = substitute(l:path, '.pm$', '', '')
    let l:module_name = substitute(l:path, '/', '::', 'g')
    execute "normal! ggwi".l:module_name
endfunction
" }}}
" NewGoFile {{{
function! NewGoFile()
    0r ~/.vim/skeleton/go.script
    let l:module = expand('%:h:t')
    execute "normal! ggwi".l:module
endfunction
" }}}
" CloseHiddenbuffers {{{
nnoremap <leader>cl :call CloseHiddenBuffers()<CR>
function! CloseHiddenBuffers()
    let visible_buffers = {}

    for tab in range(1, tabpagenr('$'))
        for buffer in tabpagebuflist(tab)
            let visible_buffers[buffer] = 1
        endfor
    endfor

    for buffer in range(1, bufnr('$'))
        if bufloaded(buffer) && !has_key(visible_buffers, buffer)
            execute 'bd ' . buffer
        endif
    endfor

    execute "NERDTree | NERDTreeToggle"
endfunction
" }}}
" DeleteFile {{{
function! DeleteFile()
    let l:path = expand('%:p')
    let l:confirm = input('Delete '.l:path.'? [YES]: ')
    if l:confirm ==# 'YES'
        call delete(l:path) | bdelete!
    endif
endfunction
" }}}
" PerlDumpVariables {{{
function! PerlDumpVariables() range
    let l:variable_filter = {}
    let l:variable_order = []

    for line_number in range(a:firstline, a:lastline)
        let l:line = getline(line_number)
        if l:line =~# '\v^\s*#'
            continue
        endif

        let l:variable_name = matchstr(l:line, '\v^\s*(my )?\$\zs([^ =]+)')
        if l:variable_name !=? ''
            if !has_key(l:variable_filter, l:variable_name)
                let l:variable_filter[l:variable_name] = 1
                let l:variable_order += [l:variable_name]
            endif
        endif
    endfor

    execute "normal! ".a:lastline."G"

    execute "normal! o\<ESC>ouse Data::Dumper; local $Data::Dumper::Sortkeys = 1; local $Data::Dumper::Maxdepth = 2;"
    for variable in l:variable_order
        execute "normal! oprint '".variable.": '.Dumper($".variable.");"
    endfor
    execute "normal! o"
endfunction
" }}}
" CommitPerlFiles {{{
function! CommitPerlFiles()
    let l:path = expand("%")
    let l:git_rev = system("git rev-parse --abbrev-ref HEAD 2>/dev/null")

    if l:path =~# '\v^(bin|lib|t)\/.+(pl|pm|t)?$'
        let l:path = substitute(l:path, '\v(bin|lib|t)/', '', '')
        let l:path = substitute(l:path, '\/', '::', 'g')

        execute "normal! :Gwrite \<BAR> Gcommit\<CR>A".l:path." - "
    else
        execute "normal! :let @f=expand('%:t:r')\<CR>:Gwrite \<BAR> Gcommit\<CR>O\<C-R>f - \<space>"
    endif

endfunction
" }}}
" ReplaceSelection {{{
function! ReplaceSelection() range
    let l:line_no = line("'>") - line("'<") + 1
    if l:line_no == 1
        try
            let a_save = @a
            normal! gv"ay
            let l:escaped = escape(@a, '\/')
            let l:escaped = substitute(l:escaped, "\r", '', '')
            let l:escaped = substitute(l:escaped, "\n", '', '')
            call feedkeys(":\<c-u>%s/\\V".l:escaped."//gc\<LEFT>\<LEFT>\<LEFT>", 'n')
        finally
            let @a = a_save
        endtry
    else
        echo "More than 1 line selected!"
    endif
endfunction
" }}}
" ToggleLineNumbers {{{
function! ToggleLineNumbers()
    if &number
        set nonumber
        set norelativenumber
    else
        set number
        set relativenumber
    endif
endfunction
" }}}
" PerlOpenModule {{{
function! PerlOpenModule(type)
    " t s v
    let l:line = line(".")
    let l:col = col(".")
    let l:file = expand("%:p")

    let l:cmd = "/home/davs/bin/perl_find_module.pl " . l:file . " " . l:line . " " . l:col
    let l:result = system(l:cmd)
    let l:result = substitute(l:result, '\n\+$', '', '')
    if strlen(l:result) > 10
        let l:tokens = split(l:result, "\t")
        if a:type == 1
            execute "tabnew " . l:tokens[0]
        elseif a:type == 2
            execute "split " . l:tokens[0]
        elseif a:type == 3
            execute "vsplit " . l:tokens[0]
        else
            execute "e " . l:tokens[0]
        endif
        execute l:tokens[1]
        " echo l:result
    endif
endfunction
" }}}
" }}}
" Plugin settings {{{
" Tabularize {{{
vnoremap <leader>ah :Tabularize /^.\{-}\zs=>/l1l1<CR>
vnoremap <leader>a= :Tabularize /^.\{-}\zs=\(>\)\@!/l1l1<CR>
vnoremap <leader>a, :Tabularize /^.\{-}\zs,/l1l1<CR>
vnoremap <leader>aa :Tabularize /
vnoremap <leader>af :Tabularize /^.\{-}\zs/l1l1<left><left><left><left><left>

nnoremap <leader>ah :Tabularize /^.\{-}\zs=>/l1l1<CR>
nnoremap <leader>a= :Tabularize /^.\{-}\zs=\(>\)\@!/l1l1<CR>
nnoremap <leader>a, :Tabularize /^.\{-}\zs,/l1l1<CR>
nnoremap <leader>aa :Tabularize /
nnoremap <leader>af :Tabularize /^.\{-}\zs/l1l1<left><left><left><left><left>
" }}}
" ctrlp {{{
set runtimepath^=~/.vim/bundle/ctrlp.vim
if executable('fd')
    let g:ctrlp_user_command = 'fd --type f --color=never "" %s'
    let g:ctrlp_use_caching = 0
    let g:ctrlp_match_window_reversed = 0
endif
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_regexp = 0
let g:ctrlp_by_filename = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = {
            \ 'dir': '\v(\.git|venv|deps|_build)',
            \ 'file': '\v(__init2__\.py|\.pyc)$',
            \ }

nnoremap <leader>, :CtrlP<CR>
" }}}
" Clever-f {{{
let g:clever_f_across_no_line = 0
" }}}
" Rooter {{{
let g:rooter_patterns = [ '.vimproject', '.git/' ]
let g:rooter_manual_only = 0
let g:rooter_change_directory_for_non_project_files = 1
" }}}
" snippets {{{
let g:snips_author = "David Kovacs [DavsX]"
let g:snips_email = "kovdavid@gmail.com"
let g:snips_github = "http://github.com/DavsX"
" }}}
" NERDTree {{{
function! NERDTreeFindToggle()
    if &filetype=='nerdtree'
        execute 'NERDTreeClose'
    else
        if (exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1)
            execute 'NERDTreeClose'
        else
            execute 'NERDTreeFind'
        endif
    endif
endfunction
nnoremap <F5> :call NERDTreeFindToggle()<CR>

let NERDTreeIgnore = ['\.pyc$']
let NERDTreeChDirMode=0
" }}}
" Fugitive {{{
nnoremap gst :Gstatus<CR>5j
nnoremap gd :Gvdiff<CR>
nnoremap gci :let @f=expand("%:t:r")<CR>:Gwrite <BAR> Gcommit<CR>O<C-R>f:<space>
nnoremap gca :Gwrite <BAR> Gcommit --amend<CR>ggA
" }}}
" supertab {{{
let g:SuperTabDefaultCompletionType="<c-x><c-o>"
let g:SuperTabClosePreviewOnPopupClose=1
" }}}
" NERDCommenter {{{
let g:NERDCustomDelimiters = {
            \ 'elixir': { 'left': '#' },
            \ 'haskell': { 'left': '--' },
            \ 'arduino': { 'left': '//' }
            \}
let g:NERDRemoveExtraSpaces = 1
let g:NERDSpaceDelims = 1
" }}}
" delimitMate {{{
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
" }}}
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
" }}}
