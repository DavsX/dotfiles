" vimrc by Davs
" Vundle {{{
colorscheme desert

filetype off

set rtp+=~/.vim/bundle/vundle
call vundle#rc()

Bundle 'gmarik/vundle'

Bundle 'rhysd/clever-f.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'Raimondi/delimitMate'
Bundle 'scrooloose/nerdcommenter'
Bundle 'godlygeek/tabular'
Bundle 'Chiel92/vim-autoformat'
Bundle 'tpope/vim-surround'

" snipMate
Bundle 'tomtom/tlib_vim'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'garbas/vim-snipmate'
"Bundle 'honza/vim-snippets'


" new
Bundle 'airblade/vim-rooter'
Bundle 'scrooloose/syntastic'
Bundle 'DavsX/test_class_runner'

filetype indent on
filetype plugin on
syntax on

" }}}
" Basic settings {{{
set nocp
set encoding=utf-8
set history=999                " history size
set lazyredraw                 " don't redraw when executing macros (good performance option)
set hidden                     " hide buffers instead of closing them
set modelines=4                " gives 4 lines for modelines (vim meta at the beginning/end of files)
set backspace=indent,eol,start " allow backspace in insert mode
set autochdir                  " auto change directory when opening a file
set errorformat=%f:%l:%m
set autowrite
set nobackup
set noswapfile
set scrolloff=3                " when moving vertically set 3 lines to the cursor
set pastetoggle=<F2>
set mouse=a
set mousehide
set number
set showbreak=â†ª
set splitbelow
set splitright

"gary
set timeout timeoutlen=1000 ttimeoutlen=1000
let g:sh_noisk=1
" }}}
" cmdline {{{
set cmdheight=1             "command line size
set showcmd                 "show last command
set wildmenu                "cmdline completition
" }}}
" Leader {{{
let mapleader = ","
let maplocalleader = "\\"
" }}}
" Search {{{
set showmatch
set nohlsearch
set incsearch

set ignorecase
"set smartcase

"nmap <silent> <leader>/ :set hlsearch!<CR>

" very magic mode for regexes
nnoremap <leader>/ /\v

vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>
vnoremap <C-R> "hy:%s/<C-r>h//g<left><left>
" }}}
" Indents {{{
set autoindent
set copyindent

vnoremap > >gv
vnoremap < <gv
" }}}
" Tabs {{{
set shiftwidth   =4             "number of spaces for indenting
set tabstop      =4             "number of spaces for tabs
set softtabstop  =4             "number of spaces for tabs while editing
set expandtab                   "autoinsert spaces instead of tabs
" }}}
" Statusline {{{
set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%5*%{&ff}%*            "file format
set statusline +=%3*%y%*                "file type
set statusline +=%4*\ %<%F%*            "full path
set statusline +=%2*%m%*                "modified flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines
set statusline +=%1*%4v\ %*             "virtual column number
set statusline +=%2*0x%04B\ %*          "character under cursor
" }}}
" Gui {{{
" ruler {{{
set ruler
set rulerformat=%m\ [%l/%L\ %v]
" }}}
set guifont=Liberation\ Mono\ 11

set guioptions=
set guioptions+=a "autoselect
set guioptions+=e "tabs
set guioptions+=g "grey menu items
set guioptions+=i "vim icon
set guioptions+=t "tearoff menu items

"set guioptions-=T           "remove the toolbar
"set guioptions-=m           "remove the menubar
"set guioptions-=l           "remove scrollbar
"set guioptions-=r           "remove scrollbar
"set guioptions-=b           "remove scrollbar

set guitablabel=%t          "show only filename in tabs

set t_Co=256
if has('gui_running')
colorscheme desert
set cursorline
else
colorscheme desert256
set nocursorline
endif

hi CursorLine cterm=NONE ctermbg=239

set title
set noerrorbells
set showmode
" }}}
" Basic maps {{{
nnoremap <CR> :
nnoremap ; :
noremap <leader>w :w<CR>

noremap <leader>r :e<CR>

"disable ex-mode
nnoremap Q <NOP>

"move to matching brace pair
nnoremap <tab> %

"CTRL-J joins lines
"nnoremap <c-j> :normal! J<CR>

"split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" slow
"nnoremap <leader>m <C-W>_<C-W><BAR>

"toggle ';' at the end of the line
"nnoremap <leader>; :call ToggleSemicolonEndLine()<CR>

"close window/split with CTRL-Q
"nnoremap <c-Q> :wincmd q<CR>

inoremap <c-f> <c-x><c-f>

nnoremap <localleader>pr :e /home/davs/workspace/projects<CR>
nnoremap <localleader>pc :call ChangeToCurrentLine()<CR>

nnoremap ds<space> F<space>xf<space>x

"nnoremap <leader>p; <esc>:%s/;l$/;/g<CR>:%s/l$/;/gc<CR>
" }}}
" Movement maps {{{
nnoremap H ^
nnoremap L g_

vnoremap H ^
vnoremap L g_

"j/k move in wrapped lines too
nnoremap j gj
nnoremap k gk

vnoremap j gj
vnoremap k gk

onoremap ii :<c-u>call SelectIndent()<CR>
nnoremap <leader>vii :<c-u>call SelectIndent()<CR>
vnoremap ii :<c-u>call SelectIndent()<CR>

" }}}
" Row/column highlight {{{
noremap <F3> :set cursorline!<CR>
noremap <F4> :set cursorcolumn!<CR>
" }}}
" Tabs {{{
noremap <c-t> :tabnew<CR>
nnoremap <c-n> :tabprev<CR>
nnoremap <c-m> :tabnext<CR>
" }}}
" Filetype {{{
" EveryFile {{{
augroup all_file_type
    autocmd!
    "autocmd BufRead,BufEnter * :silent !echo "vim" > /dev/null
    "autocmd BufRead,BufEnter * setlocal cmdheight=2
    "autocmd BufRead,BufEnter * setlocal cmdheight=1
augroup END
" }}}
" Perl {{{
augroup filetype_perl
    autocmd!
    autocmd BufRead,BufNewFile *.pm  setfiletype perl
    autocmd BufRead,BufNewFile *.pl  setfiletype perl
    autocmd BufRead,BufNewFile *.t   setfiletype perl

    autocmd BufNewFile *.pl 0r ~/.vim/skeleton.perl
    autocmd BufNewFile *.pm 0r ~/.vim/skeleton.package.perl
    autocmd BufNewFile *.t 0r ~/.vim/skeleton.test.perl

    autocmd BufWritePre * if &filetype=='perl' | %s/\s\+$//e | endif

    autocmd BufRead,BufWritePre,FileType perl execute ":Rooter"

    autocmd BufRead,BufNewFile *.pm  setlocal filetype=perl
    autocmd BufRead,BufNewFile *.pl  setlocal filetype=perl
    autocmd BufRead,BufNewFile *.t   setlocal filetype=perl

    autocmd FileType perl setlocal complete-=i
    autocmd FileType perl setlocal foldlevel=1
    autocmd FileType perl setlocal foldnestmax=2
    autocmd FileType perl let perl_include_pod = 1
    autocmd FileType perl let perl_extended_vars = 1
    autocmd FileType perl let perl_fold = 1
    autocmd FileType perl let perl_fold_blocks = 1

    autocmd FileType perl let g:syntastic_perl_lib_path = [ './t/lib', './lib' ]

    autocmd FileType perl nnoremap <buffer> <leader>pt :call RunPerlTidy()<CR>
    autocmd FileType perl vnoremap <silent> <buffer> <leader>pt :!perltidy<CR>

    autocmd FileType perl noremap <buffer> <leader>sc :call SyntaxCheck()<CR>

    autocmd FileType perl noremap <buffer> <leader>dd <ESC>ause Data::Dumper;<CR>local $Data::Dumper::Maxdepth = 2;<CR>say Dumper ;<LEFT>
    autocmd FileType perl noremap <buffer> <leader>my <ESC>a<CR>    my ($self) = @_;<CR><ESC>O
    "autocmd FileType perl iabbrev <silent> <buffer> datadump use Data::Dumper;<CR>local $Data::Dumper::Maxdepth = 2;<CR>say Dumper ;
    "autocmd FileType perl iabbrev <silent> <buffer> datadump use Data::Dumper;<CR>local $Data::Dumper::Maxdepth = 2;<CR>say Dumper ;

augroup END
" }}}
" Python {{{
augroup filetype_python
    autocmd!

    Bundle 'davidhalter/jedi-vim'
    Bundle 'vim-scripts/Python-Syntax-Folding'

    autocmd BufNewFile *.py 0r ~/.vim/skeleton.python
    autocmd BufRead,BufNewFile *.py setfiletype python

    autocmd FileType python setlocal foldlevel=1
augroup END
" }}}
" HTML {{{
augroup filetype_html
    autocmd!
    autocmd BufRead,BufNewFile *.tt  setfiletype html

    autocmd BufRead,BufNewFile *.tt setlocal foldmethod=marker

    autocmd FileType html setlocal foldlevel=99
    autocmd FileType html setlocal shiftwidth=2
    autocmd FileType html setlocal tabstop=2
    autocmd FileType html setlocal softtabstop=2
    autocmd FileType html setlocal expandtab

    autocmd FileType html highlight link htmlLink text
    autocmd FileType html syn region htmlLink start="<a\>\_[^>]*\<href\>" end="</a>"me=e-4 keepend contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLinkText,javaScript,@htmlPreproc
    autocmd FileType html syn match htmlLinkText contained contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLinkText,javaScript,@htmlPreproc "^\s*\zs.\{-}\ze\s*$"
    autocmd FileType html syn match htmlLinkText contained contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLinkText,javaScript,@htmlPreproc "\S.\{-}\ze\s*$"
    autocmd FileType html highlight def link htmlLinkText Underlined

    "autocmd BufRead,BufWritePre * if &filetype == 'html' | call RunAutoIndent() | endif

    "autocmd FileType html noremap <buffer> <F7> :call RunAutoIndent()<CR>

    autocmd FileType html iabbrev <buffer> nbsp &nbsp;
augroup END
" }}}
" vim {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd FileType vim setlocal foldlevel=0

    "autocmd BufWritePre * if &filetype=='vim' | %s/\s\+$//e | endif


    autocmd FileType vim noremap <buffer> <leader>sv  :source $MYVIMRC<CR>:edit<CR>
    autocmd FileType vim noremap <buffer> <leader>ss  :source %<CR>
augroup END
" }}}
" c {{{
augroup filetype_c
    autocmd!
    autocmd BufRead,BufNewFile *.c setfiletype c
    autocmd BufRead,BufNewFile *.h setfiletype c

    autocmd FileType c setlocal foldlevel=1
    "autocmd FileType c noremap <buffer> <F12> :silent !ctags -R --sort=1 --c++-kinds=+pl --fields=+isS --extra=+q --excmd=number -I__wur .<CR><CR>
    "autocmd FileType c noremap <buffer> <F7> :call RunAutoFormat()<CR><CR>
augroup END
" }}}
" javascript {{{
augroup filetype_js
    autocmd!
    autocmd BufRead,BufNewFile *.js setfiletype javascript

    autocmd BufWritePre * if &filetype=='javascript' | %s/\s\+$//e | endif

    autocmd BufRead,BufNewFile *.js setlocal foldmethod=marker
augroup END
" }}}
" CursorLine {{{ 
augroup CursorLine
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END
" }}}
" }}}
" vimrc {{{
noremap <leader>ev :tabnew $MYVIMRC<CR>
noremap <leader>sv :source $MYVIMRC<CR>
noremap <leader>so :execute getline(".")<CR>
" }}}
" Diff {{{
highlight! link DiffText MatchParen

noremap <leader>du :diffupdate<CR>
noremap <leader>dg :diffget
noremap <leader>dp :diffput
noremap <leader>do :diffoff<CR>
noremap <leader>dt :diffthis<CR>
" }}}
" Folding {{{
set foldmethod   =indent
set foldlevel    =20 "open folds by default

noremap <space> za
noremap zJ zczj
noremap zK zczk
" }}}
" Disable arrow keys {{{
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
" }}}
" Functions {{{
" SelectIndent {{{
function! SelectIndent ()
let temp_var=indent(line("."))
while indent(line(".")-1) >= temp_var
    execute "normal! k"
endwhile
execute "normal! V"
while indent(line(".")+1) >= temp_var
    execute "normal! j"
endwhile
endfunction
" }}}
" ChangeToCurrentLine {{{
function! ChangeToCurrentLine()
    let row = getline(".")
    echom row
    execute ":cd ".row
    execute ":e ".row
endfunction
" }}}
" SyntaxCheck {{{
function! SyntaxCheck()
    execute ":SyntasticReset"
    execute ":Rooter"
    execute ":SyntasticCheck"
endfunction
" }}}
" ToggleColorColumn {{{
set colorcolumn=0
let g:colorcolumn_set = 0
highlight ColorColumn guibg=#666666

noremap <F5> :call ToggleColorColumn()<CR>

function! ToggleColorColumn()
if g:colorcolumn_set == 1
    set colorcolumn=0
    let g:colorcolumn_set = 0
else
    set colorcolumn=100
    let g:colorcolumn_set = 1
endif
endfunction
" }}}
" ToggleLastStatus {{{
set laststatus=1
let g:laststatus_value = 1

noremap <F6> :call ToggleLastStatus()<CR>

function! ToggleLastStatus()
if g:laststatus_value == 1
    set laststatus=2
    let g:laststatus_value = 2
else
    set laststatus=1
    let g:laststatus_value = 1
endif
endfunction
" }}}
" }}}
" Plugin settings {{{
" Tabularize {{{
vnoremap <leader>ah :Tabularize /=><CR>
vnoremap <leader>a= :Tabularize /=<CR>
vnoremap <leader>a, :Tabularize /,<CR>

nnoremap <leader>ah :Tabularize /=><CR>
nnoremap <leader>a= :Tabularize /=<CR>
nnoremap <leader>a, :Tabularize /,<CR>
" }}}
" ctrlp {{{
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_custom_ignore = 'virtualenv'

nnoremap <leader>, :CtrlP<CR>
" }}}
" Clever-f {{{
let g:clever_f_across_no_line = 0
" }}}
" Rooter {{{
let g:rooter_patterns = [ '.git/', '.vimproject', 't/' ]
let g:rooter_manual_only = 0
let g:rooter_change_directory_for_non_project_files = 0
" }}}
" Syntastic {{{
let g:syntastic_enable_highlighting=1
let g:syntastic_mode_map={ 'mode': 'passive' }
let g:syntastic_enable_signs= 1
let g:syntastic_python_checkers=['pylint','pyflakes','pep8']
let g:syntastic_python_pylint_args="--disable=C0111"
let g:syntastic_perl_checkers= ['perl']
" }}}
" vim-jedi {{{

" }}}
" test_class_runner {{{
nnoremap <leader>rf :PerlTestFile<CR>
nnoremap <leader>rt :PerlTestFile<CR>
nnoremap <leader>rs :PerlTestSub<CR>
nnoremap <leader>ra :ProveTestAll<CR>

let $TEST_PRETTY_COLOR_NAME  = 'bright_green'
let $TAP_ELAPSED_FORMAT  = '%t1 elapsed'
let g:test_class_path_folder = 'tests'
let g:test_class_path_prefix = 'Test'
let g:test_class_perl_args   = '-MTest::Pretty -Ilib -It/lib -It/tests'
let g:test_class_prove_args  = '-Ilib -It/lib -It/tests -j9 --timer'
" }}}
" }}}
