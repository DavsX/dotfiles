snippet #!
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-

	def main():

	if __name__ == '__main__':
		main()
snippet imp
	import ${0:module}
snippet uni
	def __unicode__(self):
		${0:representation}
snippet from
	from ${1:package} import ${0:module}
# Module Docstring
snippet docs
	"""
	File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}
	Author: `g:snips_author`
	Email: `g:snips_email`
	Github: `g:snips_github`
	Description: ${0}
	"""

snippet while
	while ${1:condition}:
		${0}

snippet wh
	while ${1:condition}:
		${0}

snippet with
	with ${1:expr} as ${2:var}:
		${0}

# New Class
snippet class
	class ${1}(object):
		def __init__(self${2}):
			${3}
# New Function
snippet deft
	def test_${1}(self):
		${0}
# New Function
snippet def
	def ${1}(${2:`indent('.') ? 'self' : ''`}):
		${0}

# New Method
snippet defs
	def ${1}(self, ${2}):
		${0}
# Asserts

snippet ass
	assert ${1}
snippet ase
	assert_equal(${1}, ${2})
snippet asne
	assert_not_equal(${1}, ${2})
snippet asi
	assert_in(${1}, ${2})
snippet asni
	assert_not_in(${1}, ${2})
snippet asie
	assert_items_equal(${1}, ${2})
snippet asse
	assert_seqence_equal(${1}, ${2})
snippet ast
	assert_true(${1})
snippet asf
	assert_false(${1})
snippet ain
	assert_is_none(${1})
snippet ainn
	assert_is_not_none(${1})
snippet asii
	assert_is_instance(${1}, ${2})

# Ifs
snippet if
	if ${1:condition}:
		${0}
snippet else
	else:
		${0}
snippet elseif
	elif ${1:condition}:
		${0}
snippet elsif
	elif ${1:condition}:
		${0}
snippet elif
	elif ${1:condition}:
		${0}
# For
snippet for
	for ${1:item} in ${2:items}:
		${0}
# Lambda
snippet try Try/Except
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${0:raise $3}
snippet try Try/Except/Else
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${0}
snippet try Try/Except/Finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${0}
snippet try Try/Except/Else/Finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${0:main()}
# __magic__
snippet _
	__${1:init}__
# python debugger (pdb)
snippet pdb
	import pdb; pdb.set_trace()
# ipython debugger (ipdb)
snippet ipdb
	import ipdb; ipdb.set_trace()
# ipython debugger (pdbbb)
snippet pdbbb
	import pdbpp; pdbpp.set_trace()
# python console debugger (pudb)
snippet pudb
	import pudb; pudb.set_trace()
snippet pprint
	import pprint; pprint.pprint(${1})
